AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Example for hosting wordpress on lambda with AWS Lambda Web Adapter

Parameters:
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    # AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  MasterUsername:
    Type: String
  MasterUserPassword:
    Type: String
    NoEcho: true
  WordpressDatabaseName:
    Type: String
    Default: wp_metadata

Resources:
  DefaultVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: "Name"
          Value: "serverless-wordpress-hosting"
  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref DefaultVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt DefaultVPC.CidrBlock, 2, 8]]
  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref "AWS::Region"
      VpcId: !Ref DefaultVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt DefaultVPC.CidrBlock, 2, 8]]
  LambdaFunctionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref DefaultVPC
      GroupDescription: Hosting wordpress lambda function
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref DefaultVPC
      GroupDescription: Security group allowing ingress for mysql client
  DBSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DBSecurityGroup
      IpProtocol: TCP
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaFunctionSecurityGroup
  AuroraDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: AuroraDBSubnetGroup
      DBSubnetGroupDescription: Aurora DB Subnet Group
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
  AuroraCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.03.1
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBSubnetGroupName: !Ref AuroraDBSubnetGroup
      DatabaseName: !Ref WordpressDatabaseName
      ServerlessV2ScalingConfiguration:
        MinCapacity: 1
        MaxCapacity: 2
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
  AuroraInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: aurora-mysql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref AuroraCluster

  WordpressFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 256
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          WORDPRESS_DB_HOST: !GetAtt AuroraCluster.Endpoint.Address
          WORDPRESS_DB_NAME: !Ref WordpressDatabaseName
          WORDPRESS_DB_USER: !Ref MasterUsername
          WORDPRESS_DB_PASSWORD: !Ref MasterUserPassword
    Metadata:
      DockerTag: v1
      DockerContext: ./
      Dockerfile: Dockerfile
